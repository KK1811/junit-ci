/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 15 03:07:04 GMT 2022
 */

package com.pat.avltree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pat.avltree.AVLTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = (-2250);
      aVLTree0.insert((-2250));
      int int1 = (-1687);
      aVLTree0.delete((-1687));
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.right = aVLTree_Node1;
      int int2 = (-1071);
      // Undeclared exception!
      try { 
        aVLTree0.delete((-1687));
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(194);
      aVLTree0.delete(194);
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete((-478));
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree0.insert((-478));
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(415);
      aVLTree0.insert(3317);
      aVLTree0.insert(415);
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.insert(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(415);
      aVLTree0.insert(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert((-1716));
      aVLTree0.insert((-1));
      aVLTree0.insert((-1572));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.delete(1542);
      aVLTree_Node0.height = 1586;
      aVLTree0.insert(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.find((-1572));
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1716));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1572));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.delete(1542);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.height = 1585;
      assertEquals(1585, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals(1585, aVLTree0.height());
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(1585, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1585, int0);
      assertEquals(1585, aVLTree0.height());
      assertSame(aVLTree_Node0, aVLTree_Node1);
      
      int int1 = aVLTree0.height();
      assertEquals(1585, int1);
      assertEquals(1585, aVLTree0.height());
      assertTrue(int1 == int0);
      
      aVLTree_Node1.key = 1585;
      assertEquals(1585, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertEquals(1585, aVLTree0.height());
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertNotNull(aVLTree_Node2);
      
      int int2 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1585, int2);
      assertEquals(1585, aVLTree0.height());
      assertSame(aVLTree_Node0, aVLTree_Node1);
      assertSame(aVLTree_Node0, aVLTree_Node2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = aVLTree0.height();
      assertEquals(1585, int3);
      assertEquals(1585, aVLTree0.height());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.find((-1572));
      assertEquals(1585, aVLTree0.height());
      assertNull(aVLTree_Node3);
      
      aVLTree0.insert(0);
      assertEquals(1588, aVLTree0.height());
      
      // Undeclared exception!
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 383;
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(383);
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-498));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertEquals(0, aVLTree0.height());
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.height = (-498);
      assertEquals(0, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals(0, int1);
      assertEquals(0, aVLTree0.height());
      assertFalse(int1 == int0);
      
      aVLTree_Node0.key = 0;
      assertEquals(0, aVLTree0.height());
      
      int int2 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, int2);
      assertEquals(0, aVLTree0.height());
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = aVLTree0.height();
      assertEquals(0, int3);
      assertEquals(0, aVLTree0.height());
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.right;
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node2);
      
      aVLTree_Node1.left = aVLTree_Node0;
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(2113);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 1;
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-15));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(916);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-15));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-2019));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-396));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-396));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-140));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(2055);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-1));
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      
      aVLTree0.insert((-2286));
      assertEquals(2, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(2055);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = (-52);
      aVLTree0.delete((-52));
      assertEquals((-1), aVLTree0.height());
      
      int int1 = 0;
      aVLTree0.delete((-890));
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node1);
      
      int int2 = 3417;
      aVLTree0.insert((-52));
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-52));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-1639));
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1);
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree_Node0.key = (-1639);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      assertNull(aVLTree_Node1);
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      int int1 = aVLTree0.height();
      assertEquals(0, int1);
      assertEquals(0, aVLTree0.height());
      assertFalse(int1 == int0);
      
      aVLTree0.insert(3289);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node1.key = (-1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.height = 917;
      assertEquals(917, aVLTree0.height());
      
      aVLTree0.delete((-763));
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.getBalance(aVLTree_Node1);
      assertEquals(1, int2);
      assertEquals(1, aVLTree0.height());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(46);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(3121);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(2, aVLTree0.height());
      
      AVLTree aVLTree1 = new AVLTree();
      assertEquals((-1), aVLTree1.height());
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertNotNull(aVLTree1);
      
      aVLTree0.insert((-231));
      assertEquals(2, aVLTree0.height());
      assertNotSame(aVLTree0, aVLTree1);
      assertFalse(aVLTree0.equals((Object)aVLTree1));
      
      aVLTree1.insert(46);
      assertEquals(0, aVLTree1.height());
      assertNotSame(aVLTree1, aVLTree0);
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      
      aVLTree1.insert(0);
      assertEquals(1, aVLTree1.height());
      assertNotSame(aVLTree1, aVLTree0);
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
      assertNotSame(aVLTree0, aVLTree1);
      assertFalse(aVLTree0.equals((Object)aVLTree1));
      
      AVLTree.Node aVLTree_Node0 = aVLTree1.new Node(1510);
      assertEquals(1, aVLTree1.height());
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree1.find(0);
      assertEquals(1, aVLTree1.height());
      assertNotSame(aVLTree1, aVLTree0);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(1, aVLTree1.height());
      
      aVLTree_Node0.height = 643;
      assertEquals(1, aVLTree1.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, int0);
      assertEquals(2, aVLTree0.height());
      assertEquals(1, aVLTree1.height());
      assertNotSame(aVLTree0, aVLTree1);
      assertNotSame(aVLTree1, aVLTree0);
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
      assertFalse(aVLTree0.equals((Object)aVLTree1));
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      
      AVLTree.Node aVLTree_Node2 = aVLTree1.getRoot();
      assertEquals(1, aVLTree1.height());
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertNotSame(aVLTree1, aVLTree0);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertNotNull(aVLTree_Node2);
      
      aVLTree0.delete((-1622));
      assertEquals(2, aVLTree0.height());
      assertNotSame(aVLTree0, aVLTree1);
      assertFalse(aVLTree0.equals((Object)aVLTree1));
      
      aVLTree1.insert((-3885));
      assertEquals(1, aVLTree1.height());
      assertNotSame(aVLTree1, aVLTree0);
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      
      AVLTree.Node aVLTree_Node3 = aVLTree_Node1.left;
      assertNotSame(aVLTree_Node3, aVLTree_Node1);
      assertNotSame(aVLTree_Node3, aVLTree_Node0);
      assertNotSame(aVLTree_Node3, aVLTree_Node2);
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node2));
      assertNotNull(aVLTree_Node3);
      
      int int1 = aVLTree0.getBalance(aVLTree_Node1);
      assertEquals(0, int1);
      assertEquals(2, aVLTree0.height());
      assertEquals(1, aVLTree1.height());
      assertNotSame(aVLTree0, aVLTree1);
      assertNotSame(aVLTree1, aVLTree0);
      assertNotSame(aVLTree_Node1, aVLTree_Node2);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertNotSame(aVLTree_Node1, aVLTree_Node3);
      assertFalse(aVLTree0.equals((Object)aVLTree1));
      assertFalse(int1 == int0);
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node2));
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node3));
      
      AVLTree.Node aVLTree_Node4 = aVLTree0.find((-55));
      assertEquals(2, aVLTree0.height());
      assertNotSame(aVLTree0, aVLTree1);
      assertFalse(aVLTree0.equals((Object)aVLTree1));
      assertNull(aVLTree_Node4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(916);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-15));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertEquals(2, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
      aVLTree0.insert(2027);
      aVLTree0.insert(1);
      aVLTree0.find((-1));
      aVLTree0.getRoot();
      aVLTree0.insert(857);
      aVLTree0.insert((-4278));
      aVLTree0.insert((-585));
      aVLTree0.delete(2027);
      aVLTree0.insert(0);
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.delete(1);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      assertEquals(2, aVLTree0.height());
  }
}
