/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 15 04:05:10 GMT 2022
 */

package com.pat.avltree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pat.avltree.AVLTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      
      aVLTree0.insert(2027);
      aVLTree0.insert(1);
      aVLTree0.find((-1));
      aVLTree0.getRoot();
      aVLTree0.insert(857);
      aVLTree0.insert((-4278));
      aVLTree0.insert((-585));
      aVLTree0.delete(2027);
      aVLTree0.insert(0);
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.delete(1);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-164));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-164));
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.key = 2289;
      aVLTree_Node1.key = (-164);
      aVLTree_Node0.right = aVLTree_Node1;
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      aVLTree_Node1.height = (-164);
      aVLTree_Node0.right = aVLTree_Node2;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree_Node0.right.left = aVLTree_Node1;
      aVLTree_Node0.right.right = aVLTree_Node0.right.left;
      aVLTree0.getRoot();
      // Undeclared exception!
      aVLTree0.delete((-164));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(916);
      aVLTree0.insert((-15));
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.find(1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 383;
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(383);
      aVLTree0.insert(0);
      aVLTree0.delete((-498));
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.height = (-498);
      aVLTree0.height();
      aVLTree_Node0.key = 0;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.right;
      aVLTree_Node1.left = aVLTree_Node0;
      // Undeclared exception!
      try { 
        aVLTree0.insert(2113);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.find(0);
      aVLTree0.getBalance((AVLTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert((-1716));
      aVLTree0.insert((-1));
      aVLTree0.insert((-1572));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete(1542);
      aVLTree_Node0.height = 1585;
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree_Node1.key = 1585;
      aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.find((-1572));
      aVLTree0.insert(0);
      // Undeclared exception!
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert((-1716));
      aVLTree0.insert((-1));
      aVLTree0.insert((-1572));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.delete(1542);
      aVLTree_Node0.height = 1586;
      aVLTree0.insert(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.find((-1572));
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete((-478));
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree0.insert((-478));
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(342);
      aVLTree0.insert(0);
      aVLTree0.insert((-2033));
      aVLTree0.height();
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      aVLTree0.find((-1));
      aVLTree0.delete((-701));
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      aVLTree0.insert((-2019));
      aVLTree0.find((-1));
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1684));
      aVLTree0.insert(4);
      aVLTree0.insert((-1599));
      aVLTree0.delete((-1684));
      aVLTree0.delete(8);
      aVLTree0.insert(8);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-4814));
      aVLTree0.find(0);
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(194);
      aVLTree0.delete(194);
      aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      aVLTree0.insert((-1115));
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1115));
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2649));
      aVLTree0.insert((-420));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2085);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(585);
      aVLTree0.height();
      aVLTree0.insert(0);
      aVLTree0.insert((-12));
      aVLTree0.delete((-12));
      aVLTree0.find((-12));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-153));
      aVLTree0.insert(4130);
      aVLTree0.insert(1);
      aVLTree0.delete(2617);
      aVLTree0.insert(1203);
      aVLTree0.insert(2617);
      aVLTree0.delete(1);
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
      aVLTree0.insert((-1));
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      aVLTree0.find(1);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }
}
