/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 15 22:35:20 GMT 2022
 */

package com.pat.avltree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pat.avltree.AVLTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
      aVLTree0.insert(2027);
      aVLTree0.insert(1);
      aVLTree0.find((-1));
      aVLTree0.getRoot();
      aVLTree0.insert(857);
      aVLTree0.insert((-4278));
      aVLTree0.insert((-585));
      aVLTree0.delete(2027);
      aVLTree0.insert(0);
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.delete(1);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete((-478));
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree0.insert((-478));
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert((-1716));
      aVLTree0.insert((-1));
      aVLTree0.insert((-1572));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.delete(1542);
      aVLTree_Node0.height = 1586;
      aVLTree0.insert(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.find((-1572));
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert((-1716));
      aVLTree0.insert((-1));
      aVLTree0.insert((-1572));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete(1542);
      aVLTree_Node0.height = 1585;
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree_Node1.key = 1585;
      aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.find((-1572));
      aVLTree0.insert(0);
      // Undeclared exception!
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 383;
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(383);
      aVLTree0.insert(0);
      aVLTree0.delete((-498));
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.height = (-498);
      aVLTree0.height();
      aVLTree_Node0.key = 0;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.right;
      aVLTree_Node1.left = aVLTree_Node0;
      // Undeclared exception!
      try { 
        aVLTree0.insert(2113);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-164));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-164));
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.key = 2289;
      aVLTree_Node1.key = (-164);
      aVLTree_Node0.right = aVLTree_Node1;
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      aVLTree_Node1.height = (-164);
      aVLTree_Node0.right = aVLTree_Node2;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree_Node0.right.left = aVLTree_Node1;
      aVLTree_Node0.right.right = aVLTree_Node0.right.left;
      aVLTree0.getRoot();
      // Undeclared exception!
      aVLTree0.delete((-164));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete(749);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      int int0 = 0;
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      aVLTree_Node1.key = 0;
      aVLTree_Node1.right = aVLTree_Node0;
      aVLTree_Node1.right = aVLTree_Node0;
      aVLTree_Node1.left = aVLTree_Node0;
      int int1 = 2291;
      aVLTree_Node1.left.height = 2291;
      aVLTree_Node1.left.right = aVLTree_Node1.right;
      aVLTree_Node0.key = 0;
      aVLTree_Node1.height = 0;
      aVLTree_Node1.height = 0;
      aVLTree_Node1.left = aVLTree_Node0;
      aVLTree0.getBalance(aVLTree_Node1);
      int int2 = (-1);
      // Undeclared exception!
      try { 
        aVLTree0.delete(int2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
      aVLTree0.insert((-1));
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      aVLTree0.find(1);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1239));
      aVLTree0.height();
      aVLTree0.insert(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      aVLTree_Node0.height = 0;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(6236);
      aVLTree0.delete(1);
      int int0 = (-1);
      aVLTree0.insert((-1));
      aVLTree0.delete(1520);
      aVLTree0.insert((-2091));
      aVLTree0.delete((-2091));
      aVLTree0.height();
      aVLTree0.delete(1520);
      aVLTree0.delete((-2091));
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.insert(0);
      int int1 = 0;
      aVLTree0.find(0);
      int int2 = 2449;
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.pat.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-159));
      aVLTree0.insert(4130);
      aVLTree0.insert(1);
      aVLTree0.delete(2617);
      aVLTree0.insert(1203);
      aVLTree0.insert(2617);
      aVLTree0.delete(1);
      assertEquals(2, aVLTree0.height());
  }
}
